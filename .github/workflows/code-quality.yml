name: Code Quality Checks

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
  push:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'

jobs:
  code-quality:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
        
    - name: Install dependencies
      run: npm ci
      
    - name: TypeScript type checking
      run: |
        echo "üîç Running TypeScript type checking..."
        npx tsc --noEmit
        
    - name: ESLint
      run: |
        echo "üîç Running ESLint..."
        npx eslint . --ext .ts,.tsx --format=compact --max-warnings 0
        
    - name: Check for useSearchParams without Suspense
      run: |
        echo "üîÑ Checking for useSearchParams without Suspense..."
        
        # Find files using useSearchParams
        FILES_WITH_SEARCH_PARAMS=$(find src/app -name "*.tsx" -exec grep -l "useSearchParams" {} \; 2>/dev/null || true)
        
        if [ ! -z "$FILES_WITH_SEARCH_PARAMS" ]; then
          echo "Files using useSearchParams: $FILES_WITH_SEARCH_PARAMS"
          
          for file in $FILES_WITH_SEARCH_PARAMS; do
            if ! grep -q "Suspense" "$file"; then
              echo "‚ùå ERROR: $file uses useSearchParams but doesn't import/use Suspense"
              echo "Please wrap useSearchParams usage in a Suspense boundary."
              exit 1
            else
              echo "‚úÖ $file properly uses Suspense with useSearchParams"
            fi
          done
        else
          echo "‚úÖ No useSearchParams usage found or all properly wrapped"
        fi
        
    - name: Check for unsafe error handling
      run: |
        echo "üö® Checking for unsafe error.response usage..."
        
        # Find service files with error.response usage
        FILES_WITH_ERROR_RESPONSE=$(find src/services -name "*.ts" -exec grep -l "error\.response" {} \; 2>/dev/null || true)
        
        if [ ! -z "$FILES_WITH_ERROR_RESPONSE" ]; then
          for file in $FILES_WITH_ERROR_RESPONSE; do
            if ! grep -q "isAxiosError" "$file"; then
              echo "‚ùå ERROR: $file uses error.response without isAxiosError type guard"
              echo "Please import isAxiosError from axios and use proper type checking."
              exit 1
            else
              echo "‚úÖ $file properly uses isAxiosError type guard"
            fi
          done
        else
          echo "‚úÖ No unsafe error.response usage found"
        fi
        
    - name: Check for missing error handling imports
      run: |
        echo "üì¶ Checking for missing isAxiosError imports in service files..."
        
        # Find service files with catch blocks but no isAxiosError import
        SERVICE_FILES=$(find src/services -name "*.ts" -not -name "*.d.ts" 2>/dev/null || true)
        WARNINGS=0
        
        if [ ! -z "$SERVICE_FILES" ]; then
          for file in $SERVICE_FILES; do
            if grep -q "catch.*error" "$file" && ! grep -q "import.*isAxiosError" "$file"; then
              echo "‚ö†Ô∏è  WARNING: $file has error handling but no isAxiosError import"
              WARNINGS=$((WARNINGS + 1))
            fi
          done
        fi
        
        if [ $WARNINGS -gt 0 ]; then
          echo "Found $WARNINGS files that could benefit from isAxiosError import"
          echo "Consider adding proper error type checking for better reliability"
        else
          echo "‚úÖ All service files have proper error handling imports"
        fi
        
    - name: Check for 'any' type usage
      run: |
        echo "üîç Checking for excessive 'any' type usage..."
        
        ANY_COUNT=$(grep -r ": any\|<any>" src --include="*.ts" --include="*.tsx" | grep -v "templates/" | wc -l || echo "0")
        
        if [ "$ANY_COUNT" -gt 5 ]; then
          echo "‚ö†Ô∏è  WARNING: Found $ANY_COUNT usages of 'any' type"
          echo "Consider using more specific types for better type safety"
          grep -r ": any\|<any>" src --include="*.ts" --include="*.tsx" | grep -v "templates/" | head -10
        else
          echo "‚úÖ Acceptable 'any' type usage ($ANY_COUNT occurrences)"
        fi
        
    - name: Build check
      run: |
        echo "üèóÔ∏è  Running build check..."
        npm run build
        
    - name: Run tests
      run: |
        echo "üß™ Running tests..."
        npm test -- --passWithNoTests --watchAll=false
        
  # Additional job for dependency vulnerability scanning
  security:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./frontend
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: |
        echo "üîí Running security audit..."
        npm audit --audit-level=moderate
        
    - name: Check for vulnerable dependencies
      run: |
        echo "üîç Checking for known vulnerabilities..."
        npx audit-ci --moderate